#!/usr/bin/php
<?php

require __DIR__ . '/../../vendor/autoload.php';

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Process\ProcessBuilder;

class CodeQualityTool extends Application {

  private $output;

  private $input;

  const PHP_FILES_IN_SRC = '/(.*)(\.php|\.theme|\.module)$/';

  public function __construct() {
    parent::__construct('Code Quality Tool', '1.0.0');
  }

  public function doRun(InputInterface $input, OutputInterface $output) {
    $this->input = $input;
    $this->output = $output;

    $output->writeln('<fg=white;options=bold;bg=red>Code Quality Tool</fg=white;options=bold;bg=red>');
    $output->writeln('<info>Fetching files</info>');
    $files = $this->extractCommitedFiles();

    $output->writeln('<info>Check composer</info>');
    $this->checkComposer($files);

    $output->writeln('<info>Running PHPLint</info>');
    if (!$this->phpLint($files)) {
      throw new Exception('There are some PHP syntax errors!');
    }

    /*$output->writeln('<info>Checking code style</info>');
    if (!$this->codeStyle($files)) {
        throw new Exception(sprintf('There are coding standards violations!'));
    }*/

    $output->writeln('<info>Checking code style with PHPCBF</info>');
    if (!$this->codeStyleCbf($files)) {
      throw new Exception(sprintf('There are PHPCBF coding standards violations!'));
    }

    $output->writeln('<info>Checking code style with PHPCS</info>');
    if (!$this->codeStylePsr($files)) {
      throw new Exception(sprintf('There are PHPCS coding standards violations!'));
    }

    $output->writeln('<info>Checking code mess with PHPMD</info>');
    if (!$this->phPmd($files)) {
      throw new Exception(sprintf('There are PHPMD violations!'));
    }

    //    $output->writeln('<info>Running unit tests</info>');
    //    if (!$this->unitTests()) {
    //      throw new Exception('Fix the fucking unit tests!');
    //    }

    $output->writeln('<info>Good job dude!</info>');
  }

  private function checkComposer($files) {
    $composerJsonDetected = FALSE;
    $composerLockDetected = FALSE;

    foreach ($files as $file) {
      if ($file === 'composer.json') {
        $composerJsonDetected = TRUE;
      }

      if ($file === 'composer.lock') {
        $composerLockDetected = TRUE;
      }
    }

    if ($composerJsonDetected && !$composerLockDetected) {
      throw new Exception('composer.lock must be commited if composer.json is modified!');
    }
  }

  private function extractCommitedFiles() {
    $output = [];
    $rc = 0;

    exec('git rev-parse --verify HEAD 2> /dev/null', $output, $rc);

    $against = '4b825dc642cb6eb9a060e54bf8d69288fbee4904';
    if ($rc == 0) {
      $against = 'HEAD';
    }

    exec("git diff-index --cached --name-status $against | egrep '^(A|M)' | awk '{print $2;}'", $output);

    return $output;
  }

  private function phpLint($files) {
    $needle = '/(\.php)|(\.inc)$/';
    $succeed = TRUE;

    foreach ($files as $file) {

      if ($this->checkFileIsExclude($file)) {
        continue;
      }

      if (!preg_match($needle, $file)) {
        continue;
      }

      $processBuilder = new ProcessBuilder(['php', '-l', $file]);
      $process = $processBuilder->getProcess();
      $process->run();

      if (!$process->isSuccessful()) {

        $this->output->writeln($file);
        $this->output->writeln(sprintf('<error>%s</error>', trim($process->getErrorOutput())));

        if ($succeed) {
          $succeed = FALSE;
        }
      }
    }

    return $succeed;
  }

  private function phPmd($files) {
    $needle = self::PHP_FILES_IN_SRC;
    $succeed = TRUE;

    foreach ($files as $file) {

      if ($this->checkFileIsExclude($file)) {
        continue;
      }

      if (!preg_match($needle, $file)) {
        continue;
      }
      $processBuilder = new ProcessBuilder(
        [
          'php',
          'vendor/bin/phpmd',
          $file,
          'text',
          'controversial',
        ]
      );
      $processBuilder->setWorkingDirectory(__DIR__ . '/../../');
      $process = $processBuilder->getProcess();
      $process->run();


      if (!$process->isSuccessful()) {
        $this->output->writeln($file);
        $this->output->writeln(sprintf('<error>%s</error>', trim($process->getErrorOutput())));
        $this->output->writeln(sprintf('<info>%s</info>', trim($process->getOutput())));
        if ($succeed) {
          $succeed = FALSE;
        }
      }
    }

    return $succeed;
  }

  private function unitTests() {
    $processBuilder = new ProcessBuilder([
      'php',
      'vendor/bin/phpunit',
      '-c',
      'phpunit.xml',
      '--testsuite',
      'unit',
    ]);
    $processBuilder->setWorkingDirectory(__DIR__ . '/../../');
    $processBuilder->setTimeout(3600);
    $phpunit = $processBuilder->getProcess();

    $phpunit->run(
      function ($type, $buffer) {
        $this->output->write($buffer);
      }
    );

    return $phpunit->isSuccessful();
  }

  private function compileTestAssets() {
    $processBuilder = new ProcessBuilder(['yarn', 'run', 'dev']);
    $processBuilder->setTimeout(5200);
    $compileAssets = $processBuilder->getProcess();

    $compileAssets->run();

    return $compileAssets->isSuccessful();
  }

  private function integrationTests() {
    $processBuilder = new ProcessBuilder([
      'php',
      'vendor/bin/phpunit',
      '-c',
      'phpunit_integration.xml',
    ]);
    $processBuilder->setWorkingDirectory(__DIR__ . '/../../');
    $processBuilder->setTimeout(5200);
    $phpunit = $processBuilder->getProcess();

    $phpunit->run(
      function ($type, $buffer) {
        $this->output->write($buffer);
      }
    );

    return $phpunit->isSuccessful();
  }

  private function functionalTests() {
    $processBuilder = new ProcessBuilder([
      'php',
      'vendor/bin/behat',
      '-c',
      'behat.yml',
      '--format',
      'progress',
    ]);
    $processBuilder->setWorkingDirectory(__DIR__ . '/../../');
    $processBuilder->setTimeout(5200);
    $behat = $processBuilder->getProcess();

    $behat->run(
      function ($type, $buffer) {
        $this->output->write($buffer);
      }
    );

    return $behat->isSuccessful();
  }

  private function jestTests() {
    $processBuilder = new ProcessBuilder(['yarn', 'test']);
    $processBuilder->setWorkingDirectory(__DIR__ . '/../../');
    $processBuilder->setTimeout(5200);
    $jest = $processBuilder->getProcess();

    $jest->run(
      function ($type, $buffer) {
        $this->output->write($buffer);
      }
    );

    return $jest->isSuccessful();
  }

  private function codeStyle(array $files) {
    $succeed = TRUE;

    foreach ($files as $file) {
      $srcFile = preg_match(self::PHP_FILES_IN_SRC, $file);

      if (!$srcFile) {
        continue;
      }

      $processBuilder = new ProcessBuilder(
        [
          'php',
          'vendor/bin/php-cs-fixer',
          'fix',
          '--dry-run',
          '--verbose',
          $file,
        ]
      );

      $processBuilder->setWorkingDirectory(__DIR__ . '/../../');
      $phpCsFixer = $processBuilder->getProcess();
      $phpCsFixer->run();

      if (!$phpCsFixer->isSuccessful()) {
        $this->output->writeln(sprintf('<error>%s</error>', trim($phpCsFixer->getOutput())));

        if ($succeed) {
          $succeed = FALSE;
        }
      }
    }

    return $succeed;
  }

  private function codeStylePsr(array $files) {
    $succeed = TRUE;
    $needle = self::PHP_FILES_IN_SRC;

    foreach ($files as $file) {

      if ($this->checkFileIsExclude($file)) {
        continue;
      }

      if (!preg_match($needle, $file)) {
        continue;
      }

      $processBuilder = new ProcessBuilder([
        'php',
        'vendor/bin/phpcs',
        $file,
        '--ignore=/var/SymfonyRequirements.php,/vendor/*',
        '--standard=Drupal',
        '--encoding=utf-8 -n -p',
      ]);
      $processBuilder->setWorkingDirectory(__DIR__ . '/../../');
      $phpCsFixer = $processBuilder->getProcess();
      $phpCsFixer->run();

      if (!$phpCsFixer->isSuccessful()) {
        $this->output->writeln(sprintf('<error>%s</error>', trim($phpCsFixer->getOutput())));

        if ($succeed) {
          $succeed = FALSE;
        }
      }
    }

    return $succeed;
  }


  private function codeStyleCbf(array $files) {
    $succeed = TRUE;
    $needle = self::PHP_FILES_IN_SRC;

    foreach ($files as $file) {

      if ($this->checkFileIsExclude($file)) {
        continue;
      }

      if (!preg_match($needle, $file)) {
        continue;
      }

      $processBuilder = new ProcessBuilder([
        'php',
        'vendor/bin/phpcbf',
        $file,
        '--ignore=/var/SymfonyRequirements.php,/vendor/*',
        '--standard=Drupal',
        '--encoding=utf-8 -n -p',
      ]);
      $processBuilder->setWorkingDirectory(__DIR__ . '/../../');
      $phpCsFixer = $processBuilder->getProcess();
      $phpCsFixer->run();

      if (!$phpCsFixer->isSuccessful()) {
        $this->output->writeln(sprintf('<error>%s</error>', trim($phpCsFixer->getOutput())));

        if ($succeed) {
          $succeed = FALSE;
        }
      }
    }

    return $succeed;
  }


  private function esLint($files) {
    $needle = '/app\/Resources\/(.*)(\.js)$/';

    $esLintFiles = array_filter(
      $files,
      function ($file) use ($needle) {
        return preg_match($needle, $file);
      }
    );

    $processBuilder = new ProcessBuilder(
      array_merge([
        './node_modules/.bin/eslint',
        '-c',
        '.eslintrc.yml',
      ], $esLintFiles)
    );
    $processBuilder->setWorkingDirectory(__DIR__ . '/../../');
    $eSLint = $processBuilder->getProcess();
    $eSLint->run();

    if (!$eSLint->isSuccessful()) {
      $this->output->write($eSLint->getOutput());
    }

    return $eSLint->isSuccessful();
  }

  private function styleLint($files) {
    $needle = '/app\/Resources\/(.*)(\.scss)$/';

    $styleLintFiles = array_filter(
      $files,
      function ($file) use ($needle) {
        return preg_match($needle, $file);
      }
    );

    $processBuilder = new ProcessBuilder(
      array_merge(
        [
          './node_modules/.bin/stylelint',
          '-c',
          '.stylelintrc.json',
          '--syntax',
          'scss',
        ],
        $styleLintFiles
      )
    );
    $processBuilder->setWorkingDirectory(__DIR__ . '/../../');
    $styleLint = $processBuilder->getProcess();
    $styleLint->run();

    if (!$styleLint->isSuccessful()) {
      $this->output->write($styleLint->getOutput());
    }

    return $styleLint->isSuccessful();
  }

  private function checkFileIsExclude($file) {
    if (preg_match('/vendor/', $file)) {
      return TRUE;
    }
    elseif (preg_match('/contrib/', $file)) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
}

$console = new CodeQualityTool();
$console->run();
